parameters:
- name: workingDirectory
  type: string
# Azure Backend
- name: azureSubscription
  type: string
  default: ''
- name: stateResourceGroup
  type: string
  default: ''
- name: stateStorageAccount
  type: string
  default: ''
- name: stateStorageAccountContainer
  type: string
  default: ''
- name: stateStorageAccountKey
  type: string
  default: ''

steps:
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: Download Terraform
  
- ${{ if ne(length(parameters.azureSubscription), 0) }}:
  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: Initializing
    inputs:
      command: init
      workingDirectory: ${{ parameters.workingDirectory }}
      backendType: azurerm
      backendServiceArm: ${{ parameters.azureSubscription }}
      backendAzureRmResourceGroupName: ${{ parameters.stateResourceGroup }}
      backendAzureRmStorageAccountName: ${{ parameters.stateStorageAccount }}
      backendAzureRmContainerName: ${{ parameters.stateStorageAccountContainer }}
      backendAzureRmKey: ${{ parameters.stateStorageAccountKey }}
    env:
      TF_CLI_ARGS: -no-color
      TF_CLI_ARGS_init: -backend=true
      TF_INPUT: false

- ${{ if eq(length(parameters.azureSubscription), 0) }}:
  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: Initializing
    inputs:
      command: init
      workingDirectory: ${{ parameters.workingDirectory }}
    env:
      TF_CLI_ARGS: -no-color
      TF_CLI_ARGS_init: -backend=false
      TF_INPUT: false
