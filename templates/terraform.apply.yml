parameters:
- name: azureSubscription
  type: string
- name: stateResourceGroup
  type: string
- name: stateStorageAccount
  type: string
- name: stateStorageAccountContainer
  type: string
- name: stateStorageAccountKey
  type: string
- name: workingDirectory
  type: string
- name: variablesFile
  type: string
  default: ''
- name: variables
  type: string
  default: ''

steps:
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: Download latest

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: Initializing
  inputs:
    command: init
    workingDirectory: ${{ parameters.workingDirectory }}
    backendType: azurerm
    backendServiceArm: ${{ parameters.azureSubscription }}
    backendAzureRmResourceGroupName: ${{ parameters.stateResourceGroup }}
    backendAzureRmStorageAccountName: ${{ parameters.stateStorageAccount }}
    backendAzureRmContainerName: ${{ parameters.stateStorageAccountContainer }}
    backendAzureRmKey: ${{ parameters.stateStorageAccountKey }}
  env:
    TF_CLI_ARGS: -no-color
    TF_INPUT: false

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  name: applying
  displayName: Applying
  inputs:
    command: apply
    commandOptions: ${{ parameters.variables }}
    secureFilePath: ${{ parameters.variablesFile }}
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceName: ${{ parameters.azureSubscription }}
  env:
    TF_CLI_ARGS: -no-color
    TF_IN_AUTOMATATION: true
    TF_INPUT: false
    TF_AUTO_APPROVE: true

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: Convert Output to Environment Variables
  inputs:
    command: output
    workingDirectory: ${{ parameters.workingDirectory }}

# - powershell: |
#     $terraformOutput = Get-Content "$(applying.jsonOutputVariablesPath)" | ConvertFrom-Json
#     $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
#   name: setenvironment
#   displayName: Convert Output to Environment Variables



# - bash: |
#     set -eu

#     echo "Setting job variables from Terraform outputs:"
#     terraform output -json | jq -r '
#       . as $in
#       | keys[]
#       | ["- " + .]
#       | @tsv'
    
#     terraform output -json | jq -r '
#       . as $in
#       | keys[]
#       | ($in[.].value | tostring) as $value
#       | ($in[.].sensitive | tostring) as $sensitive
#       | [
#         "- " + . + ": " + if $in[.].sensitive then "(sensitive)" else $value end,  # output name to console
#         "##vso[task.setvariable variable=" + . + ";isSecret=" + $sensitive + "]" + $value,  # set as ADO task variable
#         "##vso[task.setvariable variable=" + . + ";isOutput=true;isSecret=" + $sensitive + "]" + $value  # also set as ADO job variable
#         ]
#       | .[]'
#   name: Outputs
#   displayName: Read Terraform outputs
#   workingDirectory: ${{ parameters.TerraformDirectory }}

# jobs:
# - deployment: apply_terraform
#     displayName: Apply Terraform
#     environment: ${{ parameters.project }}-${{ parameters.workspace }}
#     pool:
#       vmImage: "Ubuntu-16.04"
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             - download: current
#               artifact: terraform-plan-${{ parameters.workspace }}
#               displayName: Download Terraform files

#             - task: ExtractFiles@1
#               displayName: Decompress Terraform files
#               inputs:
#                 archiveFilePatterns: "$(Pipeline.Workspace)/terraform-plan-${{ parameters.workspace }}/terraform.zip"
#                 destinationFolder: "$(Pipeline.Workspace)"
#                 cleanDestinationFolder: false

#             - bash: chmod -R +x $(Pipeline.Workspace)/terraform/.terraform/plugins/**/terraform*
#               displayName: Make Terraform plugins executable

#             - template: ./terraform.install.yml
#               parameters:
#                 terraformVersion: $(parameters.terraformVersion)

#             - bash: |
#                 $TERRAFORM_BINARY apply \
#                   -input=false \
#                   -auto-approve \
#                   -no-color \
#                   ${{ parameters.workspace }}.tfplan
#               displayName: Apply Terraform plan
#               workingDirectory: $(Pipeline.Workspace)/terraform
#               env:
#                 TF_IN_AUTOMATION: "true"
#                 ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#                 ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#                 ARM_TENANT_ID: $(ARM_TENANT_ID)
#                 ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#             - template: ../../steps/terraform/output-save.yml
#               parameters:
#                 workingDirectory: $(Pipeline.Workspace)/terraform
#                 project: ${{ parameters.project }}
#                 workspace: ${{ parameters.workspace }}
