parameters:
- name: azureSubscription
  type: string
- name: stateResourceGroup
  type: string
- name: stateStorageAccount
  type: string
- name: stateStorageAccountContainer
  type: string
- name: stateStorageAccountKey
  type: string
- name: workingDirectory
  type: string
- name: variablesFile
  type: string
  default: ''
- name: variables
  type: string
  default: ''

steps:
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: Download Terraform

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: Initializing Backend
  inputs:
    command: init
    workingDirectory: ${{ parameters.workingDirectory }}
    backendType: azurerm
    backendServiceArm: ${{ parameters.azureSubscription }}
    backendAzureRmResourceGroupName: ${{ parameters.stateResourceGroup }}
    backendAzureRmStorageAccountName: ${{ parameters.stateStorageAccount }}
    backendAzureRmContainerName: ${{ parameters.stateStorageAccountContainer }}
    backendAzureRmKey: ${{ parameters.stateStorageAccountKey }}
  env:
    TF_CLI_ARGS: -no-color
    TF_INPUT: false

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: Applying Infrastructure Changes
  inputs:
    command: apply
    commandOptions: ${{ parameters.variables }}
    secureFilePath: ${{ parameters.variablesFile }}
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceName: ${{ parameters.azureSubscription }}
  env:
    TF_CLI_ARGS: -no-color
    TF_IN_AUTOMATATION: true
    TF_INPUT: false
    TF_AUTO_APPROVE: true

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: Output to Environment Variables
  inputs:
    command: output
    workingDirectory: ${{ parameters.workingDirectory }}
